{"version":3,"sources":["components/Header.js","components/Loader.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Loader","type","color","message","style","position","top","left","transform","height","width","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setquarantinedData","comparedData","setcomparedData","isLoading","setIsLoading","useEffect","fetchEvent","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b62dcd4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>COVID-19</h1>\r\n      <select>\r\n        <option>국내</option>\r\n        <option>세계</option>\r\n      </select>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nfunction Loader({ type, color, message }) {\r\n  return (\r\n    <div className=\"contentWrap\">\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n        }}\r\n      >\r\n        <h2>{message}</h2>\r\n        <ReactLoading type={type} color={color} height={'80%'} width={'80%'} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Loader;\r\n","import { useState, useEffect } from 'react';\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport Loader from './Loader';\r\n\r\nconst Contents = () => {\r\n  const [confirmedData, setConfirmedData] = useState({});\r\n  const [quarantinedData, setquarantinedData] = useState({});\r\n  const [comparedData, setcomparedData] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      const res = await axios.get('https://api.covid19api.com/total/dayone/country/kr');\r\n      setIsLoading(false);\r\n      makeData(res.data);\r\n    };\r\n    const makeData = (items) => {\r\n      const arr = items.reduce((acc, cur) => {\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Active;\r\n        const death = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        const findItem = acc.find((a) => a.year === year && a.month === month);\r\n\r\n        if (!findItem) {\r\n          acc.push({ year, month, date, confirmed, active, death, recovered });\r\n        }\r\n        if (findItem && findItem.date < date) {\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.date = date;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.recovered = recovered;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      const labels = arr.map((a) => `${a.month + 1}월`);\r\n      setConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: '국내 누적 확진자',\r\n            backgroundColor: 'salmon',\r\n            fill: true,\r\n            data: arr.map((a) => a.confirmed),\r\n          },\r\n        ],\r\n      });\r\n      setquarantinedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: '월별 격리자 현황',\r\n            borderColor: 'salmon',\r\n            fill: false,\r\n            data: arr.map((a) => a.active),\r\n          },\r\n        ],\r\n      });\r\n      const last = arr[arr.length - 1];\r\n      setcomparedData({\r\n        labels: ['확진자', '격리해제', '사망'],\r\n        datasets: [\r\n          {\r\n            label: '누적 확진, 해제, 사망 비율',\r\n            backgroundColor: ['#ff3d67', '#059bff', '#ffc233'],\r\n            borderColor: ['#ff3d67', '#059bff', '#ffc233'],\r\n            fill: false,\r\n            data: [last.confirmed, last.recovered, last.death],\r\n          },\r\n        ],\r\n      });\r\n    };\r\n\r\n    fetchEvent();\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      {isLoading ? (\r\n        <Loader type=\"spin\" color=\"#2b2b2b\" message={'불러오는중...'} />\r\n      ) : (\r\n        <div>\r\n          <h2>국내 코로나 현황</h2>\r\n          <div className=\"contents\">\r\n            <div>\r\n              <Bar\r\n                data={confirmedData}\r\n                options={\r\n                  ({ title: { display: true, text: '누적 확진자 추이', fontSize: 16 } },\r\n                  { legend: { display: true, position: 'bottom' } })\r\n                }\r\n              />\r\n            </div>\r\n            <div>\r\n              <Line\r\n                data={quarantinedData}\r\n                options={\r\n                  ({ title: { display: true, text: '월별 격리자 현황', fontSize: 16 } },\r\n                  { legend: { display: true, position: 'bottom' } })\r\n                }\r\n              />\r\n            </div>\r\n            <div>\r\n              <Doughnut\r\n                data={comparedData}\r\n                options={\r\n                  ({\r\n                    title: {\r\n                      display: true,\r\n                      text: `누적 확진, 해제, 사망 (${new Date().getMonth() + 1})`,\r\n                      fontSize: 16,\r\n                    },\r\n                  },\r\n                  { legend: { display: true, position: 'bottom' } })\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contents;\r\n","import './App.css';\nimport Header from './components/Header';\nimport Contents from './components/Contents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}